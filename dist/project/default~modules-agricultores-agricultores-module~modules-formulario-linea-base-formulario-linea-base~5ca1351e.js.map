{"version":3,"sources":["./node_modules/ngx-csv-parser/__ivy_ngcc__/fesm2015/ngx-csv-parser.js","./node_modules/ngx-csv-parser/node_modules/tslib/tslib.es6.js","./src/app/modules/core/services/importaciones/importacion-agricultor.service.ts","./src/app/modules/core/services/importaciones/importacion-linea-base.service.ts","./src/app/modules/core/services/importaciones/importacion-verificacion.service.ts","./src/app/modules/core/services/importaciones/importaciones.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACiD;AAClD;;AAEM;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,yCAAyC,+CAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+CAA+C,UAAU,yDAAyD,UAAU;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B;AACxE;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,kCAAkC;AACxF,qBAAqB,wEAAkB,EAAE,2CAA2C,2BAA2B,EAAE,2CAA2C;AAC5J;AACA,mBAAmB;AACnB;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,wEAAwE,2CAA2C;AACnH,6BAA6B,+DAAwB,EAAE,kJAAkJ;AACzM,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,oBAAoB;;AAE3B;AACA;AACA,0BAA0B,8DAAuB,EAAE,2BAA2B;AAC9E,0BAA0B,8DAAuB,EAAE,kDAAkD,wCAAwC,EAAE,4CAA4C;AAC3L,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;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","file":"default~modules-agricultores-agricultores-module~modules-formulario-linea-base-formulario-linea-base~5ca1351e.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, Component, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport * as ɵngcc0 from '@angular/core';\nclass NgxCSVParserError {\r\n}\n\nlet NgxCsvParser = class NgxCsvParser {\r\n    constructor() {\r\n        this.defaultCSVParserConfig = {\r\n            header: true,\r\n            delimiter: ','\r\n        };\r\n    }\r\n    parse(csvFile, config) {\r\n        config = Object.assign(Object.assign({}, this.defaultCSVParserConfig), config);\r\n        const ngxCSVParserObserver = new Observable((observer) => {\r\n            try {\r\n                let csvRecords = null;\r\n                if (this.isCSVFile(csvFile)) {\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(csvFile);\r\n                    reader.onload = () => {\r\n                        const csvData = reader.result;\r\n                        const csvRecordsArray = this.csvStringToArray(csvData.trim(), config.delimiter);\r\n                        const headersRow = this.getHeaderArray(csvRecordsArray);\r\n                        csvRecords = this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);\r\n                        observer.next(csvRecords);\r\n                        observer.complete();\r\n                    };\r\n                    reader.onerror = () => {\r\n                        this.badCSVDataFormatErrorHandler(observer);\r\n                    };\r\n                }\r\n                else {\r\n                    this.notCSVFileErrorHandler(observer);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.unknownCSVParserErrorHandler(observer);\r\n            }\r\n        });\r\n        return ngxCSVParserObserver;\r\n    }\r\n    csvStringToArray(csvDataString, delimiter) {\r\n        const regexPattern = new RegExp((`(\\\\${delimiter}|\\\\r?\\\\n|\\\\r|^)(?:\\\"((?:\\\\\\\\.|\\\"\\\"|[^\\\\\\\\\\\"])*)\\\"|([^\\\\${delimiter}\\\"\\\\r\\\\n]*))`), \"gi\");\r\n        let matchedPatternArray = regexPattern.exec(csvDataString);\r\n        const resultCSV = [[]];\r\n        while (matchedPatternArray) {\r\n            if (matchedPatternArray[1].length && matchedPatternArray[1] !== delimiter) {\r\n                resultCSV.push([]);\r\n            }\r\n            const cleanValue = matchedPatternArray[2] ?\r\n                matchedPatternArray[2].replace(new RegExp(\"[\\\\\\\\\\\"](.)\", \"g\"), '$1') : matchedPatternArray[3];\r\n            resultCSV[resultCSV.length - 1].push(cleanValue);\r\n            matchedPatternArray = regexPattern.exec(csvDataString);\r\n        }\r\n        return resultCSV;\r\n    }\r\n    getDataRecordsArrayFromCSVFile(csvRecordsArray, headerLength, config) {\r\n        const dataArr = [];\r\n        const headersArray = csvRecordsArray[0];\r\n        const startingRowToParseData = config.header ? 1 : 0;\r\n        for (let i = startingRowToParseData; i < csvRecordsArray.length; i++) {\r\n            const data = csvRecordsArray[i];\r\n            if (data.length === headerLength && config.header) {\r\n                const csvRecord = {};\r\n                for (let j = 0; j < data.length; j++) {\r\n                    if ((data[j] === undefined) || (data[j] === null)) {\r\n                        csvRecord[headersArray[j]] = \"\";\r\n                    }\r\n                    else {\r\n                        csvRecord[headersArray[j]] = data[j].trim();\r\n                    }\r\n                }\r\n                dataArr.push(csvRecord);\r\n            }\r\n            else {\r\n                dataArr.push(data);\r\n            }\r\n        }\r\n        return dataArr;\r\n    }\r\n    isCSVFile(file) {\r\n        return file.name.toLowerCase().endsWith('.csv');\r\n    }\r\n    getHeaderArray(csvRecordsArr) {\r\n        const headers = csvRecordsArr[0];\r\n        const headerArray = [];\r\n        for (const header of headers) {\r\n            headerArray.push(header);\r\n        }\r\n        return headerArray;\r\n    }\r\n    notCSVFileErrorHandler(observer) {\r\n        const ngcCSVParserError = this.errorBuilder('NOT_A_CSV_FILE', 'Selected file is not a csv File Type.', 2);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n    unknownCSVParserErrorHandler(observer) {\r\n        const ngcCSVParserError = this.errorBuilder('UNKNOWN_ERROR', 'Unknown error. Please refer to official documentation for library usage.', 404);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n    badCSVDataFormatErrorHandler(observer) {\r\n        const ngcCSVParserError = this.errorBuilder('BAD_CSV_DATA_FORMAT', 'Unable to parse CSV File.', 1);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n    errorBuilder(type, message, code) {\r\n        const ngcCSVParserError = new NgxCSVParserError();\r\n        ngcCSVParserError.type = type;\r\n        ngcCSVParserError.message = message;\r\n        ngcCSVParserError.code = code;\r\n        return ngcCSVParserError;\r\n    }\r\n};\nNgxCsvParser.ɵfac = function NgxCsvParser_Factory(t) { return new (t || NgxCsvParser)(); };\r\nNgxCsvParser.ɵprov = ɵɵdefineInjectable({ factory: function NgxCsvParser_Factory() { return new NgxCsvParser(); }, token: NgxCsvParser, providedIn: \"root\" });\r\nclass CSVParserConfig {\r\n    constructor() { }\r\n}\n\nlet NgxCsvParserComponent = class NgxCsvParserComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n};\nNgxCsvParserComponent.ɵfac = function NgxCsvParserComponent_Factory(t) { return new (t || NgxCsvParserComponent)(); };\nNgxCsvParserComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxCsvParserComponent, selectors: [[\"lib-ngx-csv-parser\"]], decls: 2, vars: 0, template: function NgxCsvParserComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"p\");\n        ɵngcc0.ɵɵtext(1, \" ngx-csv-parser works! \");\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2 });\n\nlet NgxCsvParserModule = class NgxCsvParserModule {\r\n};\nNgxCsvParserModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCsvParserModule });\nNgxCsvParserModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCsvParserModule_Factory(t) { return new (t || NgxCsvParserModule)(); }, providers: [NgxCsvParser], imports: [[]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCsvParser, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCsvParserComponent, [{\n        type: Component,\n        args: [{\n                selector: 'lib-ngx-csv-parser',\n                template: `\n    <p>\n      ngx-csv-parser works!\n    </p>\n  `\n            }]\n    }], function () { return []; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCsvParserModule, { declarations: [NgxCsvParserComponent], exports: [NgxCsvParserComponent] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCsvParserModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgxCsvParserComponent],\n                imports: [],\n                providers: [NgxCsvParser],\n                exports: [NgxCsvParserComponent]\n            }]\n    }], null, null); })();\n\n/*\r\n * Public API Surface of ngx-csv-parser\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxCSVParserError, NgxCsvParser, NgxCsvParserComponent, NgxCsvParserModule };\n\n//# sourceMappingURL=ngx-csv-parser.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { NgxCsvParser, NgxCSVParserError } from 'ngx-csv-parser';\nimport { Agricultor } from 'src/app/interfaces/agricultor';\nimport { Permiso, Tecnico } from 'src/app/interfaces/tecnico';\nimport { agricultorMapper } from 'src/environments/mappers/agricultor';\nimport { AgricultorService } from '../agriculor/agricultor.service';\nimport { TecnicoService } from '../tecnico/tecnico.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImportacionAgricultorService {\n\n  constructor(\n    private ngxCsvParser: NgxCsvParser,\n    private agricultorService: AgricultorService,\n    private tecnicoService: TecnicoService\n  ) {\n  }\n\n  async importAllFormularios(file: any, header: boolean, delimeter: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.ngxCsvParser.parse(file[0], { header: header, delimiter: delimeter })\n      .subscribe(async (result: any) => {\n        try {\n          const docLines = result as Array<string[]>;\n          for (let index = 2; index < docLines.length; index++) {\n            await this.importFormulario(docLines[1], docLines[index]);\n          }\n          resolve();\n        } catch(error) {\n          console.log(error);\n          reject(error);\n        }\n      }, (error: NgxCSVParserError) => {\n        console.log('Error', error);\n        reject(error);\n      });\n    });\n  }\n\n  private async importFormulario(headers: any[], values: any[]): Promise<void> {\n    try {\n      const agricultor = await this.getAgricultor(headers, values);\n      this.fillSections(headers, values, agricultor);\n      this.fillMultipleOptions(headers, values, agricultor);\n      await this.agricultorService.set(agricultor);\n    } catch(e) {\n      console.log(e);\n      throw(e);\n    }\n  }\n\n  private async getAgricultor(headers: any[], values: any[]): Promise<Agricultor> {\n    const id = this.getValueByHeaderName(headers, values, \"id\");\n    const agricultor = await this.initAgricultor(id);\n    return agricultor;\n  }\n\n  private getValueByHeaderName(headers: string[], values: string[], headerName: string): string {\n    for (let i = 0; i < headers.length; i++) {\n      if (headers[i].toUpperCase() === headerName.toUpperCase()) {\n        return values[i];\n      }\n    }\n    return \"\";\n  }\n\n  private fillSections(headers: string[], values: string[], agricultor: Agricultor): void {\n    const mockAgricultor = agricultor as any;\n    for (let section of Object.keys(agricultor.secciones)) {\n      if (mockAgricultor[\"secciones\"][section][\"preguntas\"] != undefined) {\n        for (let question of Object.keys(mockAgricultor[\"secciones\"][section][\"preguntas\"])) {\n          this.fillQuestions(headers, values, question, mockAgricultor[\"secciones\"][section][\"preguntas\"]);\n        }\n      }\n      if (mockAgricultor[\"secciones\"][section][\"secciones\"] != undefined) {\n        const lastObject = mockAgricultor[\"secciones\"][section]\n        this.fillSections(headers, values, lastObject);\n      }\n    }\n  }\n\n  private fillQuestions(headers: string[], values: string[], question: string, lastObject: any) {\n    for (let response of Object.keys(lastObject[question])) {\n      if (response === \"respuesta\") {\n        const mockMapper = agricultorMapper as any;\n        const code = mockMapper[question][\"codigo\"];\n        let value = this.getValueByHeaderName(headers, values, code);\n        if (Array.isArray(lastObject[question][response]) && value != undefined) {\n          const arrayValue = value.split(',');\n          lastObject[question][response] = arrayValue;\n        } else {\n          lastObject[question][response] = value;\n        }\n      } else if (response === \"preguntas\") {\n        const newLastObject = lastObject[question][response];\n        for (let question in newLastObject) {\n          this.fillQuestions(headers, values, question, newLastObject);\n        }\n      } else if (response === \"arreglo\") {\n        this.pickQuestionWithDynamicArray(headers, values, lastObject[question][response], question);\n      }\n    }\n  }\n\n  private pickQuestionWithDynamicArray(headers: string[], values: string[], dynamicArray: any[], question: string): void {\n    let codes = [];\n    switch (question) {\n      case \"viejosInjertados\":\n        codes = ['CAC42_AVI1', 'CAC13_ECVIN', 'CAC43_AVI2', 'CAC44_EVI2'];\n        const questionsVI = [\"areaViejoInjertado\", \"edadViejoInjertado\"];\n        this.fillDynamicArrayWithExcel(headers, values, dynamicArray, questionsVI, codes, questionsVI.length);\n        break;\n      case \"nuevosClones\":\n        codes = ['CAC45_ANC1', 'CAC15_NCED', 'CAC46_ANC2', 'CAC47_ENC2', 'CAC48_ANC3', 'CAC49_ENC3'];\n        const questionsNV = [\"areaNuevosClones\", \"edadNuevosClones\"];\n        this.fillDynamicArrayWithExcel(headers, values, dynamicArray, questionsNV, codes, questionsNV.length);\n        break;\n    }\n  }\n\n  private fillDynamicArray(headers: string[], values: string[], dynamicArray: any[], arrayOfQuestions: string[], codes?: string[], numberOfFields?: number) {\n    let hayCampos = true;\n    let countOfFields = 1;\n    while (hayCampos) {\n      let viejoInjertado: any = {};\n      for (let question of arrayOfQuestions) {\n        const mockMapper = agricultorMapper as any;\n        const codeInDocument = mockMapper[question][\"codigo\"] + countOfFields.toString();\n        const value = this.getValueByHeaderName(headers, values, codeInDocument);\n        if (value === \"\" || countOfFields === 10) {\n          hayCampos = false;\n          break;\n        } else {\n          viejoInjertado[question] = {};\n          viejoInjertado[question][\"respuesta\"] = value; \n        }\n      }\n      if (hayCampos) {\n        dynamicArray.push(viejoInjertado);\n      }\n      countOfFields++;\n    }\n  }\n\n  private fillDynamicArrayWithExcel(headers: string[], values: string[], dynamicArray: any[], arrayOfQuestions: string[], codes?: string[], numberOfFields?: number) {\n    let position = 0;\n    while (position < codes.length) {\n      let object: any = {};\n      for (let question of arrayOfQuestions) {\n        const value = this.getValueByHeaderName(headers, values, codes[position]);\n        object[question] = {};\n        object[question][\"respuesta\"] = value;\n        position++;\n      }\n      dynamicArray.push(object);\n    }\n  }\n\n  private fillMultipleOptions(headers: string[], values: string[], agricultor: Agricultor): void {\n    const celulares = ['SE06_CEL1', 'SE07_CEL2'];\n    const asociadoPolicultivo = ['FIN10_MAIZ', 'FIN11_NAR', 'FIN12_PLAT', 'FIN14_MANI', 'FIN13_OTRO'];\n    const variedades = ['CAC17_NC103', 'CAC18_NC96', 'CAC19_NC95', 'CAC50_NC800', 'CAC51_NC801', 'CAC20_NCOTR', 'CAC52_ESP', 'CAC21_NCNS'];\n    for (let index = 0; index < headers.length; index++) {\n      this.fillArray(headers[index], values[index], celulares,\n        agricultor.secciones.datosPersonales.preguntas.celulares.respuesta);\n      this.fillArray(headers[index], values[index], asociadoPolicultivo,\n        agricultor.secciones.hectareaje.preguntas.cultivoCacao.preguntas.asociadoConTiene.respuesta);\n      this.fillArray(headers[index], values[index], variedades,\n        agricultor.secciones.cacaoNacionalNuevosClones.preguntas.tipoVariedad.respuesta);\n    }\n  }\n\n  private fillArray(header: string, value: string, codigos: string[], arreglo: string[]): boolean {\n    for (let codigo of codigos) {\n      if (codigo === header) {\n        arreglo.push(value);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public async initAgricultor(agricultorId: string): Promise<Agricultor> {\n    let agricultor: Agricultor = await this.agricultorService.get(agricultorId);\n    if (agricultor === undefined) {\n      const newAgricultor: Agricultor = {\n        id: agricultorId,\n        secciones: {\n            datosPersonales: {\n              preguntas: {\n                cedula: {\n                  respuesta: \"\"\n                },\n                nombre: {\n                  respuesta: \"\"\n                },\n                estado: {\n                    respuesta: \"\"\n                },\n                fechaNacimiento: {\n                  respuesta: new Date()\n                },\n                genero: {\n                  respuesta: \"\"\n                },\n                estadoCivil: {\n                  respuesta: \"\"\n                },\n                nivelEducacion: {\n                  respuesta: \"\"\n                },\n                celulares: {\n                  respuesta: []\n                },\n                telefono: {\n                  respuesta: \"\"\n                },\n                isDiscapacitado: {\n                  respuesta: \"\"\n                },\n                tecnico: {\n                  respuesta: \"\"\n                },\n                fechaVisita: {\n                  respuesta: new Date()\n                },\n                viaPrincipalComunicacion: {\n                    respuesta: \"\"\n                },\n                comentariosComunicacion: {\n                    respuesta: \"\"\n                }\n              }\n            },\n            informacionFinca: {\n                preguntas: {\n                    provincia: {\n                        respuesta: \"\"\n                    },\n                    canton: {\n                        respuesta: \"\"\n                    },\n                    parroquia: {\n                        respuesta: \"\"\n                    },\n                    recinto: {\n                        respuesta: \"\"\n                    },\n                    nombreFinca: {\n                        respuesta: \"\"\n                    },\n                    descripcionLlegarFinca: {\n                        respuesta: \"\"\n                    },\n                    casaProductorDentroFinca: {\n                        respuesta: \"\",\n                        preguntas: {\n                          descripcionLlegarCasa: {\n                            respuesta: \"\"\n                          }\n                        }\n                    }\n                }\n            },\n            hectareaje: {\n                preguntas: {\n                    dimensionTotalFinca: {\n                        respuesta: \"\"\n                    },\n                    terreno: {\n                        respuesta: \"\"\n                    },\n                    cultivoCacao: {\n                        respuesta: \"\",\n                        preguntas: {\n                            asociadoConTiene: {\n                                respuesta: [],\n                                preguntas: {\n                                    otrosEspecifique: {\n                                        respuesta: \"\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    areaNetaCacao: {\n                        respuesta: \"\"\n                    },\n                    distanciaPlantas: {\n                        respuesta: \"\"\n                    },\n                    plantasXHectareas: {\n                        respuesta: \"\"\n                    },\n                    tipoUbicacionZona: {\n                        respuesta: \"\"\n                    },\n                    zonaProtegida: {\n                        respuesta: \"\",\n                        preguntas: {\n                          otraZona: {\n                            respuesta: \"\"\n                          }\n                        }\n                    }\n                }\n            },\n            cacaoCNN: {\n                preguntas: {\n                    areaTotalCNN: {\n                        respuesta: \"\"\n                    },\n                    areaProduccion: {\n                        respuesta: \"\"\n                    },\n                    edadCacaoProductivo: {\n                        respuesta: \"\"\n                    },\n                    areaRecienSembrada: {\n                        respuesta: \"\"\n                    },\n                    edadCacaoReciente: {\n                        respuesta: \"\"\n                    },\n                    produccionAnioAnteriorCacaoCNN: {\n                        respuesta: \"\"\n                    },\n                    precioPromedio: {\n                        respuesta: \"\"\n                    },\n                    tieneCacaoImproductivo: {\n                        respuesta: \"\",\n                        preguntas: {\n                          cuantasHectareasImproductivo: {\n                            respuesta: \"\"\n                          }\n                        }\n                    }\n                }\n            },\n            cacaoNacional: {\n                preguntas: {\n                    areaTotalNacional: {\n                        respuesta: \"\"\n                    },\n                    areaTotalNacionalViejo: {\n                        respuesta: \"\"\n                    },\n                    edadCacaoViejo: {\n                        respuesta: \"\"\n                    },\n                    brotesBasales: {\n                        respuesta: \"\"\n                    },\n                    arbolesElite: {\n                        respuesta: \"\"\n                    },\n                    areaTotalViejoInjertado: {\n                        respuesta: \"\"\n                    },\n                    viejosInjertados: {\n                        arreglo: []\n                    },\n                    areaTotalNuevosClones: {\n                        respuesta: \"\"\n                    },\n                    nuevosClones: {\n                        arreglo: []\n                    },\n                    produccionAnioAnteriorCacaoNacional: {\n                        respuesta: \"\"\n                    },\n                    precioPromedioXCacao: {\n                        respuesta: \"\"\n                    }\n                }\n            },\n            cacaoNacionalNuevosClones: {\n                preguntas: {\n                    usoAnteriorAreaNueva: {\n                        respuesta: \"\",\n                        preguntas: {\n                            otroUsoAnteriorAreaNueva: {\n                                respuesta: \"\"\n                            }\n                        }\n                    },\n                    tipoVariedad: {\n                        respuesta: [],\n                        preguntas: {\n                            especifiqueOtros: {\n                                respuesta: \"\"\n                            }\n                        }\n                    },\n                    variedadesSembradasCalificacion: {\n                        respuesta: \"\"\n                    },\n                    plantulasCondicionesEdafoclimaticas: {\n                        respuesta: \"\"\n                    },\n                    plantulasRendimiento: {\n                        respuesta: \"\"\n                    },\n                    plantulasVigorPlanta: {\n                        respuesta: \"\"\n                    },\n                    plantulasResistenciaEnfermedades: {\n                        respuesta: \"\"\n                    }\n                }\n            },\n            origenPlantas: {\n                preguntas: {\n                    nombreVivero: {\n                        respuesta: \"\"\n                    },\n                    ubicacionVivero: {\n                        respuesta: \"\"\n                    },\n                    encargadoPropagacion: {\n                        respuesta: \"\",\n                        preguntas: {\n                            otroEncargadoPropagacion: {\n                                respuesta: \"\"\n                            }\n                        }\n                    },\n                    tipoConocimiento: {\n                        respuesta: \"\"\n                    },\n                    entidadDonacion: {\n                        respuesta: \"\"\n                    },\n                    cantidadPlantasRecibidas: {\n                        respuesta: \"\"\n                    },\n                    queCultivoPoda: {\n                        respuesta: \"\"\n                    }\n                }\n            },\n            priorizacionParticipacionProyectos:{\n                preguntas: {\n                    incrementarProductividad: {\n                        respuesta: \"\",\n                        preguntas: {\n                            recibirPlantasCacaoNacional: {\n                                respuesta: \"\",\n                                preguntas: {\n                                    tieneAreaLibreParaSembrar: {\n                                        respuesta: \"\",\n                                        preguntas: {\n                                            areaLibre: {\n                                                respuesta: \"\"\n                                            }\n                                        }\n                                    },\n                                    necesitaRehaReinjerto: {\n                                        respuesta: \"\",\n                                        preguntas: {\n                                            cantidad: {\n                                                respuesta: \"\"\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            aprenderElabProductosNaturales: {\n                                respuesta: \"\"\n                            }\n                        }\n                    },\n                    mejorarCalidadCacao: {\n                        respuesta: \"\",\n                        preguntas: {\n                            bandejasCajonesFermentacion: {\n                                respuesta: \"\",\n                                preguntas: {\n                                    dispuestoHacerloPropiaCuenta: {\n                                        respuesta: \"\"\n                                    }\n                                }\n                            },\n                            tendalesElevadosCania: {\n                                respuesta: \"\"\n                            },\n                            secadorasComunitarias: {\n                                respuesta: \"\",\n                                preguntas: {\n                                    contarAgrupacionParaProyecto: {\n                                        respuesta: \"\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    diversificacionIngresos: {\n                        respuesta: \"\",\n                        preguntas: {\n                            huertosOrganicos: {\n                                respuesta: \"\"\n                            },\n                            desarrolloViveros: {\n                                respuesta: \"\"\n                            },\n                            desarrolloVentaFertilizantes: {\n                                respuesta: \"\"\n                            },\n                            rehabilitacionFinca: {\n                                respuesta: \"\"\n                            },\n                            brigadaPodadores: {\n                                respuesta: \"\",\n                                preguntas: {\n                                    contarExperienciaPoda: {\n                                        respuesta: \"\",\n                                        preguntas: {\n                                            aniosExperiencia: {\n                                                respuesta: \"\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            croquis: {\n                preguntas: {\n                  coordenadasX: {\n                    respuesta: \"\"\n                  },\n                  coordenadasY: {\n                    respuesta: \"\"\n                  },\n                  productor: {\n                    respuesta: \"\"\n                  },\n                  predio: {\n                    respuesta: \"\"\n                  },\n                  altura: {\n                    respuesta: \"\"\n                  },\n                  croquisPath: {\n                    respuesta: \"\"\n                  }\n                }\n            }\n        }\n      };\n      agricultor = newAgricultor;\n      await this.agricultorService.set(agricultor);\n    }\n    return agricultor;\n  }\n\n  public async initTecnico(tecnicoId: string, tecnicoName: string): Promise<Tecnico> {\n    let tecnico: Tecnico;\n    if (tecnicoId === undefined) {\n      tecnico = await this.tecnicoService.get(tecnicoId);\n    } else {\n      const newTecnico: Tecnico = {\n        id: \"\",\n        nombre: tecnicoName,\n        correo: \"\",\n        permiso: Permiso.Ficticio\n      };\n      tecnico = newTecnico;\n    }\n    return tecnico;\n  }\n}\n","import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\nimport { Injectable } from '@angular/core';\nimport { NgxCsvParser, NgxCSVParserError } from 'ngx-csv-parser';\nimport { FormularioLineaBase } from 'src/app/interfaces/formularioLineaBase';\nimport { environment } from 'src/environments/environment';\nimport { formularioLineaBaseMapper } from 'src/environments/mappers/formularioLineaBase';\nimport { FormularioLineaBaseService } from '../formularios/formulario-linea-base.service';\nimport { TecnicoService } from '../tecnico/tecnico.service';\nimport { ImportacionAgricultorService } from './importacion-agricultor.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImportacionLineaBaseService {\n\n  csvRecords: any[] = [];\n\n  constructor(\n    private ngxCsvParser: NgxCsvParser,\n    private importacionAgricultor: ImportacionAgricultorService,\n    private formularioLineaBaseService: FormularioLineaBaseService\n  ) {\n\n  }\n\n  async importAllFormularios(file: any, header: boolean, delimeter: string): Promise<void> {\n    try {\n      this.ngxCsvParser.parse(file[0], { header: header, delimiter: delimeter })\n      .pipe().subscribe(async (result: any) => {\n        try {\n          const docLines = result as Array<string[]>;\n          for (let index = 2; index < docLines.length; index++) {\n            await this.importFormulario(docLines[1], docLines[index]);\n          }\n        } catch(e) {\n          console.log(e);\n          throw(e);\n        }\n      }, (error: NgxCSVParserError) => {\n        console.log('Error', error);\n      });\n    } catch(e) {\n      console.log(e);\n      throw(e);\n    }\n  }\n\n  private async importFormulario(headers: any[], values: any[]): Promise<void> {\n    try {\n      const formularioLineaBase = await this.getFormularioLineaBase(headers, values);\n      this.fillSections(headers, values, formularioLineaBase);\n      this.fillMultipleOptions(headers, values, formularioLineaBase);\n      await this.formularioLineaBaseService.set(formularioLineaBase);\n    } catch(e) {\n      console.log(e);\n      throw(e);\n    }\n  }\n\n  private async getFormularioLineaBase(headers: any[], values: any[]): Promise<FormularioLineaBase> {\n    const id = this.getValueByHeaderName(headers, values, \"ID-LB\");\n    const agricultorId = this.getValueByHeaderName(headers, values, \"id\");\n    const agricultor = this.getValueByHeaderName(headers, values, \"nombre\");\n    const tecnicoId = this.getValueByHeaderName(headers, values, \"tecnicoId\");\n    const tecnico = this.getValueByHeaderName(headers, values, \"tecnico\");\n    const fechaVisita = this.getValueByHeaderName(headers, values, \"F_VISITALB\");\n    const formularioLineaBase = await this.initFormularioLineaBase(id, agricultorId, agricultor, tecnicoId, tecnico, fechaVisita);\n    return formularioLineaBase;\n  }\n\n  private getValueByHeaderName(headers: string[], values: string[], headerName: string): string {\n    for (let i = 0; i < headers.length; i++) {\n      if (headers[i].toUpperCase() === headerName.toUpperCase()) {\n        return values[i];\n      }\n    }\n    return \"\";\n  }\n\n  private fillSections(headers: string[], values: string[], formulario: FormularioLineaBase): void {\n    const mockFormulario = formulario as any;\n    for (let section of Object.keys(formulario.secciones)) {\n      if (mockFormulario[\"secciones\"][section][\"preguntas\"] != undefined) {\n        for (let question of Object.keys(mockFormulario[\"secciones\"][section][\"preguntas\"])) {\n          this.fillQuestions(headers, values, question, mockFormulario[\"secciones\"][section][\"preguntas\"]);\n        }\n      }\n      if (mockFormulario[\"secciones\"][section][\"secciones\"] != undefined) {\n        const lastObject = mockFormulario[\"secciones\"][section]\n        this.fillSections(headers, values, lastObject);\n      }\n    }\n  }\n\n  private fillQuestions(headers: string[], values: string[], question: string, lastObject: any) {\n    for (let response of Object.keys(lastObject[question])) {\n      if (response === \"respuesta\") {\n        const mockMapper = formularioLineaBaseMapper as any;\n        const code = mockMapper[question][\"codigo\"];\n        let value = this.getValueByHeaderName(headers, values, code);\n        if (Array.isArray(lastObject[question][response]) && value != undefined) {\n          const arrayValue = value.split(',');\n          lastObject[question][response] = arrayValue;\n        } else {\n          lastObject[question][response] = value;\n        }\n      } else if (response === \"preguntas\") {\n        const newLastObject = lastObject[question][response];\n        for (let question in newLastObject) {\n          this.fillQuestions(headers, values, question, newLastObject);\n        }\n      } else if (response === \"arreglo\") {\n        this.pickQuestionWithDynamicArray(headers, values, lastObject[question][response], question);\n      }\n    }\n  }\n\n  private pickQuestionWithDynamicArray(headers: string[], values: string[], dynamicArray: any[], question: string): void {\n    let codes = [];\n    switch (question) {\n      case \"miembros\":\n        codes = ['FA01_MF1', 'FA02_ED1', 'FA03_GEN1', 'FA04_SS1', 'FA05_EDU1', 'FA06_LAB1', 'FA07_LABR1', 'FA08_HOR1', 'FA09_RD1', 'FA10_ING1',\n                  'FA11_MF2', 'FA12_ED2', 'FA13_GEN2', 'FA14_SS2', 'FA15_EDU2', 'FA16_LAB2', 'FA17_LABR2', 'FA18_HOR2', 'FA19_RD2', 'FA20_ING2',\n                  'FA21_MF3', 'FA22_ED3', 'FA23_GEN3', 'FA24_SS3', 'FA25_EDU3', 'FA26_LAB3', 'FA27_LABR3', 'FA28_HOR3', 'FA29_RD3', 'FA30_ING3',\n                  'FA31_MF4', 'FA32_ED4', 'FA33_GEN4', 'FA34_SS4', 'FA35_EDU4', 'FA36_LAB4', 'FA37_LABR4', 'FA38_HOR4', 'FA39_RD4', 'FA40_ING4'];\n        const questionsM = [\"clasificacionMiembroFamiliar\", \"edad\", \"genero\", \"seguridadSocial\",\n                            \"nivelEduacion\", \"laboraEnFinca\", \"laborRealizado\", \"horasAlDiaTrabaja\",\n                            \"tieneOtraFuenteIngreso\", \"sueldoIngresoMensual\"];\n        this.fillDynamicArrayWithExcel(headers, values, dynamicArray, questionsM, codes, questionsM.length);\n        break;\n    }\n  }\n\n  private fillDynamicArray(headers: string[], values: string[], dynamicArray: any[], arrayOfQuestions: string[]) {\n    let hayCampos = true;\n    let countOfFields = 1;\n    while (hayCampos) {\n      let viejoInjertado: any = {};\n      for (let question of arrayOfQuestions) {\n        const mockMapper = formularioLineaBaseMapper as any;\n        const codeInDocument = mockMapper[question][\"codigo\"] + countOfFields.toString();\n        const value = this.getValueByHeaderName(headers, values, codeInDocument);\n        if (value === \"\" || countOfFields === 10) {\n          hayCampos = false;\n          break;\n        } else {\n          viejoInjertado[question] = {};\n          viejoInjertado[question][\"respuesta\"] = value; \n        }\n    }\n      if (hayCampos) {\n        dynamicArray.push(viejoInjertado);\n      }\n      countOfFields++;\n    }\n  }\n\n  private fillDynamicArrayWithExcel(headers: string[], values: string[], dynamicArray: any[], arrayOfQuestions: string[], codes?: string[], numberOfFields?: number) {\n    let position = 0;\n    while (position < codes.length) {\n      let object: any = {};\n      for (let question of arrayOfQuestions) {\n        const value = this.getValueByHeaderName(headers, values, codes[position]);\n        object[question] = {};\n        object[question][\"respuesta\"] = value;\n        position++;\n      }\n      dynamicArray.push(object);\n    }\n  }\n\n  private fillMultipleOptions(headers: string[], values: string[], formulario: FormularioLineaBase): void {\n    const plagas = ['MIPE09_PCO', 'MIPE10_PXI', 'MIPE11_PTR', 'MIPE12_PCH', 'MIPE13_PHO', 'MIPE24_ORO', 'MIPE14_POTR'];\n    const enfermedades = ['MIPE15_EPH', 'MIPE16_ESC', 'MIPE17_EMO', 'MIPE18_EMM', 'MIPE19_EOTR'];\n    const periodoFertilizacion = ['LAB01_F(E)', 'LAB06_F(F)', 'LAB11_F(MZ)', 'LAB16_F(A)', 'LAB21_F(MY)', 'LAB26_F(JN)', 'LAB31_F(JL)', 'LAB36_F(AG)', 'LAB41_F(S)', 'LAB46_F(O)', 'LAB51_F(N)', 'LAB56_F(D)'];\n    const periodoPoda = ['LAB02_P(E)', 'LAB07_P(F)', 'LAB12_P(MZ)', 'LAB17_P(A)', 'LAB22_P(MY)', 'LAB27_P(JN)', 'LAB32_P(JL)', 'LAB37_P(AG)', 'LAB42_P(S)', 'LAB47_P(O)', 'LAB52_P(N)', 'LAB57_P(D)'];\n    const periodoControlMaleza = ['LAB03_C(E)', 'LAB08_C(F)', 'LAB13_C(MZ)', 'LAB18_C(A)', 'LAB23_C(MY)', 'LAB28_C(JN)', 'LAB33_C(JL)', 'LAB38_C(AG)', 'LAB43_C(S)', 'LAB48_C(O)', 'LAB53_C(N)', 'LAB58_C(D)'];\n    const periodoMIPE = ['LAB04_M(E)', 'LAB09_M(F)', 'LAB14_M(MZ)', 'LAB19_M(A)', 'LAB24_M(MY)', 'LAB29_M(JN)', 'LAB34_M(JL)', 'LAB39_M(AG)', 'LAB44_M(S)', 'LAB49_M(O)', 'LAB54_M(N)', 'LAB59_M(D)'];\n    const periodoCosecha = ['LAB05_C(E)', 'LAB10_C(F)', 'LAB15_C(MZ)', 'LAB20_C(A)', 'LAB25_C(MY)', 'LAB30_C(JN)', 'LAB35_C(JL)', 'LAB40_C(AG)', 'LAB45_C(S)', 'LAB50_C(O)', 'LAB55_C(N)', 'LAB60_C(D)'];\n    const tipoBeneficios = ['ASO05_ASIS', 'ASO06_TRANS', 'ASO07_CAPC', 'ASO08_PMEJ', 'ASO09_PRE', 'ASO10_INS', 'ASO11_OTR'];\n    const verterAgua = ['HDE12_SHIG', 'HDE13_LETR', 'HDE14_PZSEP', 'HDE15_NING'];\n    for (let index = 0; index < headers.length; index++) {\n      this.fillArray(headers[index], values[index], plagas,\n        formulario.secciones.practicasAgricolas.preguntas.plagasAfectanCultivo.respuesta);\n      this.fillArray(headers[index], values[index], enfermedades,\n        formulario.secciones.practicasAgricolas.preguntas.enfermedadesAfectanCultivo.respuesta);\n      this.fillMatrixMonths(headers[index], values[index], periodoFertilizacion,\n        formulario.secciones.practicasAgricolas.preguntas.periodoFertilizacion.respuesta);\n      this.fillMatrixMonths(headers[index], values[index], periodoPoda,\n        formulario.secciones.practicasAgricolas.preguntas.periodoPoda.respuesta);\n      this.fillMatrixMonths(headers[index], values[index], periodoControlMaleza,\n        formulario.secciones.practicasAgricolas.preguntas.periodoControlMaleza.respuesta);\n      this.fillMatrixMonths(headers[index], values[index], periodoMIPE,\n        formulario.secciones.practicasAgricolas.preguntas.periodoMIPE.respuesta);\n      this.fillMatrixMonths(headers[index], values[index], periodoCosecha,\n        formulario.secciones.practicasAgricolas.preguntas.periodoCosecha.respuesta);\n      this.fillArray(headers[index], values[index], tipoBeneficios,\n        formulario.secciones.nivelAsociatividad.preguntas.perteneceAsocProgrCertif.preguntas.tiposBeneficios.respuesta);\n      this.fillArray(headers[index], values[index], verterAgua,\n        formulario.secciones.conservacionRecursosManejoDesechos.preguntas.productoContaminaEcosistema.preguntas.ubicacionDesechosAguasNegras.respuesta);\n    }\n  }\n\n  private fillArray(header: string, value: string, codigos: string[], arreglo: string[]): boolean {\n    for (let codigo of codigos) {\n      if (codigo === header) {\n        arreglo.push(value);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private fillMatrixMonths(header: string, value: string, codigos: string[], arreglo: string[]): boolean {\n    const meses = [\"ENERO\", \"FEBRERO\", \"MARZO\", \"ABRIL\", \"MAYO\", \"JUNIO\", \"JULIO\", \"AGOSTO\", \"SEPTIEMBRE\", \"OCTUBRE\", \"NOVIEMBRE\", \"DICIEMBRE\"];\n    for (let index = 0; index < codigos.length; index++) {\n        const codigo = codigos[index];\n        if (codigo === header && value === 'AFIRMATIVO') {\n            arreglo.push(meses[index]);\n            return true;\n        }\n    }\n    return false;\n  }\n\n  private async initFormularioLineaBase(id: string, agricultorId: string, agricultorName: string, tecnicoId: string, tecnicoName: string, fechaVisita: string): Promise<FormularioLineaBase> {\n    const agricultor = await this.importacionAgricultor.initAgricultor(agricultorId);\n    const tecnico = await this.importacionAgricultor.initTecnico(tecnicoId, tecnicoName);\n    return {\n      id: id,\n      agricultor: agricultor,\n      tecnico: tecnico,\n      fechaVisita: fechaVisita,\n      secciones: {\n          informacionFamilia: {\n              preguntas: {\n                  miembros: {\n                      arreglo: []\n                  },\n                  familiarDiscapacitado: {\n                      respuesta: \"\"\n                  },\n                  esposaInvolucradaEntrevista: {\n                      respuesta: \"\"\n                  },\n                  esposoIncluyeEsposaEntrevista: {\n                      respuesta: \"\"\n                  },\n                  deseoIngresoAdicionalConyuge: {\n                      respuesta: \"\"\n                  },\n                  deseoTrabajoMedioTiempoProyectosFuturos: {\n                      respuesta: \"\",\n                      preguntas: {\n                          comoCual: {\n                              respuesta: \"\"\n                          }\n                      }\n                  },\n                  hijoInteresadoEnProyectosRehabilitacionFinca: {\n                      respuesta: \"\"\n                  }\n              }\n          },\n          practicasAgricolas: {\n              preguntas: {\n                  interesElaborarFertilizanteNaturalOrganico: {\n                      respuesta: \"\"\n                  },\n                  plagasAfectanCultivo: {\n                      respuesta: []\n                  },\n                  enfermedadesAfectanCultivo: {\n                      respuesta: []\n                  },\n                  productoParaPlagas: {\n                      respuesta: \"\"\n                  },\n                  productoParaEnfermedades: {\n                      respuesta: \"\"\n                  },\n                  llevaRegistroPerdidasMazorcasXMonilla: {\n                      respuesta: \"\",\n                      preguntas: {\n                          cantidadPerdidaMazorcas: {\n                              respuesta: \"\"\n                          }\n                      }\n                  },\n                  periodoFertilizacion: {\n                      respuesta: []\n                  },\n                  periodoPoda: {\n                      respuesta: []\n                  },\n                  periodoControlMaleza: {\n                      respuesta: []\n                  },\n                  periodoMIPE: {\n                      respuesta: []\n                  },\n                  periodoCosecha: {\n                      respuesta: []\n                  }\n              }\n          },\n          saludSeguridadOcupacional: {\n              preguntas: {\n                  accidentesLaboralesUltimoAnio: {\n                      respuesta: \"\",\n                      preguntas: {\n                          tipoAccidente: {\n                              respuesta: \"\"\n                          }\n                      }\n                  },\n                  periodoIntoxicacionPresente: {\n                      respuesta: \"\",\n                      preguntas: {\n                          producto: {\n                              respuesta: \"\"\n                          }\n                      }\n                  },\n                  centroSaludCercano: {\n                      respuesta: \"\"\n                  }\n              }\n          },\n          cosecha: {\n              preguntas: {\n                  periodoCadaTumba: {\n                      respuesta: \"\"\n                  },\n                  latasCacaoXTumba: {\n                      respuesta: \"\"\n                  },\n                  realizaEscurridoSecadoCCN51: {\n                      respuesta: \"\"\n                  },\n                  diasFermentadoCacao: {\n                      respuesta: \"\"\n                  }\n              }\n          },\n          venta: {\n              preguntas: {\n                  almacenaCacaoDespSecado: {\n                      respuesta: \"\",\n                      preguntas: {\n                          tiempoAlmacenadoCacao: {\n                              respuesta: \"\"\n                          }\n                      }\n                  },\n                  propiedadTransporte: {\n                      respuesta: \"\"\n                  },\n                  tipoTransporte: {\n                      respuesta: \"\"\n                  },\n                  registroFinancieroFinca: {\n                      respuesta: \"\"\n                  },\n                  tipoRegistrosFinancierosFinca: {\n                      respuesta: \"\"\n                  }\n              }\n          },\n          nivelAsociatividad: {\n              preguntas: {\n                  perteneceAsocProgrCertif: {\n                      respuesta: \"\",\n                      preguntas: {\n                          nombreAsociacion: {\n                              respuesta: \"\"\n                          },\n                          cantidadMiembros: {\n                              respuesta: \"\"\n                          },\n                          recibeBeneficios: {\n                              respuesta: \"\"\n                          },\n                          tiposBeneficios: {\n                              respuesta: [],\n                              preguntas: {\n                                  otroTiposBeneficios: {\n                                      respuesta: \"\"\n                                  }\n                              }\n                          }\n                      }\n                  },\n                  ayudaOtraInstitucion: {\n                      respuesta: \"\",\n                      preguntas: {\n                          nombreOtraInstitucion: {\n                              respuesta: \"\"\n                          },\n                          tipoAyuda: {\n                              respuesta: \"\"\n                          }\n                      }\n                  }\n              }\n          },\n          condicionesLaborales: {\n              preguntas: {\n                  contrataTrabajadores: {\n                      respuesta: \"\",\n                      preguntas: {\n                          cantidadTrabajadores: {\n                              respuesta: \"\"\n                          }\n                      }\n                  },\n                  areaInicialContrato: {\n                      respuesta: \"\"\n                  },\n                  tipoContratoTrabajo: {\n                      respuesta: \"\"\n                  },\n                  contrataMenoresEdad: {\n                      respuesta: \"\",\n                      preguntas: {\n                          poseePermiso: {\n                              respuesta: \"\"\n                          }\n                      }\n                  },\n                  baseContratoAgricola: {\n                      respuesta: \"\"\n                  }\n              }\n          },\n          serviciosBasicos: {\n              preguntas: {\n                  energiaElectrica: {\n                      respuesta: \"\"\n                  },\n                  tipoAguaConsumoFamiliar: {\n                      respuesta: \"\"\n                  }\n              }\n          },\n          conservacionRecursosManejoDesechos: {\n              preguntas: {\n                  conocimientoManejoDesechos: {\n                      respuesta: \"\"\n                  },\n                  productoContaminaEcosistema: {\n                      respuesta: \"\",\n                      preguntas: {\n                          ubicacionDesechosAguasNegras: {\n                              respuesta: []\n                          }\n                      }\n                  },\n                  tieneArbolesSombrio: {\n                      respuesta: \"\"\n                  },\n                  cultivaVegetalesHortalizasFrutas: {\n                      respuesta: \"\"\n                  },\n                  compraProductosMercadoLocales: {\n                      respuesta: \"\",\n                      preguntas: {\n                          valorPromedioGastado: {\n                              respuesta: \"\"\n                          }\n                      }\n                  }\n              }\n          }\n      }\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NgxCsvParser, NgxCSVParserError } from 'ngx-csv-parser';\nimport { last } from 'rxjs-compat/operator/last';\nimport { FormularioVerificacion } from 'src/app/interfaces/formularioVerificacion';\nimport { formularioVerificacionMapper } from 'src/environments/mappers/formularioVerificacion';\nimport { FormularioVerificacionService } from './../../services/formularios/formulario-verificacion.service';\nimport { ImportacionAgricultorService } from './importacion-agricultor.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImportacionVerificacionService {\n\n  csvRecords: any[] = [];\n\n  constructor(\n    private ngxCsvParser: NgxCsvParser,\n    private importacionAgricultor: ImportacionAgricultorService,\n    private formularioVerificacionService: FormularioVerificacionService\n  ) {\n   }\n\n  async importAllFormularios(file: any, header: boolean, delimeter: string): Promise<void> {\n    try {\n      this.ngxCsvParser.parse(file[0], { header: header, delimiter: delimeter })\n      .pipe().subscribe(async (result: any) => {\n        try {\n          for (let index = 1; index < result.length; index++) {\n            await this.importFormulario(result[0], result[index]);\n          }\n        } catch(e) {\n          console.log(e);\n          throw(e);\n        }\n      }, (error: NgxCSVParserError) => {\n        console.log('Error', error);\n      });\n    } catch(e) {\n      console.log(e);\n      throw(e);\n    }\n  }\n\n  private async importFormulario(headers: any[], values: any[]): Promise<void> {\n    try {\n      const formularioVerificacion = await this.getFormularioVerificacion(headers, values);\n      if(formularioVerificacion != undefined){\n        this.fillSections(headers, values, formularioVerificacion);\n        this.fillMultipleOptions(headers, values, formularioVerificacion);\n        await this.formularioVerificacionService.set(formularioVerificacion);\n      }\n      \n    } catch(e) {\n      console.log(e);\n      throw(e);\n    }\n  }\n\n  private async getFormularioVerificacion(headers: any[], values: any[]): Promise<FormularioVerificacion> {\n    const id = this.getValueByHeaderName(headers, values, \"ID-FORMULARIO\");\n    const agricultorId = this.getValueByHeaderName(headers, values, \"id\");\n    const agricultor = this.getValueByHeaderName(headers, values, \"nombre\");\n    const tecnicoId = this.getValueByHeaderName(headers, values, \"tecnicoId\");\n    const tecnico = this.getValueByHeaderName(headers, values, \"tecnico\");\n    const fechaVisita = this.getValueByHeaderName(headers, values, \"F_VISITA21\");\n    const formularioVerificacion = await this.initFormularioVerificacion(id, agricultorId, agricultor, tecnicoId, tecnico, fechaVisita);\n    return formularioVerificacion;\n  }\n\n  private getValueByHeaderName(headers: string[], values: string[], headerName: string): string {\n    for (let i = 0; i < headers.length; i++) {\n      if (headers[i].toUpperCase() === headerName.toUpperCase()) {\n        return values[i];\n      }\n    }\n    return \"\";\n  }\n\n  private fillSections(headers: string[], values: string[], formulario: FormularioVerificacion): void {\n    for (let section of Object.keys(formulario[\"secciones\"])) {\n      if ((formulario as any)[\"secciones\"][section][\"preguntas\"] != undefined) {\n        for (let question of Object.keys((formulario as any)[\"secciones\"][section][\"preguntas\"])) {\n          this.fillQuestions(headers, values, question, (formulario as any)[\"secciones\"][section][\"preguntas\"]);\n        }\n      }\n      if ((formulario as any)[\"secciones\"][section][\"secciones\"] != undefined) {\n        const lastObject = (formulario as any)[\"secciones\"][section]\n        this.fillSections(headers, values, lastObject);\n      }\n    }\n  }\n\n  private fillQuestions(headers: string[], values: string[], question: string, lastObject: any) {\n    for (let response of Object.keys(lastObject[question])) {\n      if (response === \"respuesta\") {\n        const mockMapper = formularioVerificacionMapper as any;\n        const code = mockMapper[question][\"codigo\"];\n        let value = this.getValueByHeaderName(headers, values, code);\n        if (Array.isArray(lastObject[question][response]) && value != undefined) {\n          if (question === 'tipoProductoQuimico' || question === 'tipoProductoNatural') {\n            lastObject[question][response] = [value];\n          } else {\n            const arrayValue = value.replace(' ', '').split(',');\n            lastObject[question][response] = arrayValue;\n          }\n        } else {\n          lastObject[question][response] = value;\n        }\n      } else if (response === \"preguntas\") {\n        const newLastObject = lastObject[question][response];\n        for (let question in newLastObject) {\n          this.fillQuestions(headers, values, question, newLastObject);\n        }\n      } else if (response === \"arreglo\") {\n        // FORMULARIOS VERIFICACION NO TIENE ARREGLO DINAMICO\n      }\n    }\n  }\n\n  private fillMultipleOptions(headers: string[], values: string[], formulario: FormularioVerificacion): void {\n    const comoControlaMaleza = ['MAL03_QUIM', 'MAL04_MEC', 'MAL05_NAT'];\n    const tipoControlMipe = ['MIPE02_QUI', 'MIPE03_MEC', 'MIPE04_BIO'];\n    const comoRealizaSecado = ['SEC02_SASF', 'SEC03_SCAÑ', 'SEC04_SCEM', 'SEC05_MARQ', 'SEC06_SEC', 'SEC07_SPLNE', 'SEC08_SPLBL', 'SEC09_SOTR'];\n    const criterioClasificaBasura = ['HDE17_PEL', 'HDE18_ORGN', 'HDE19_BPV'];\n    const especiesArboles = ['BIO07_LAUR', 'BIO08_FERN', 'BIO09_TECA', 'BIO10_GUAY', 'BIO11_OTR'];\n    const fuentesHidricas = ['RIB02_VERT', 'RIB03_EST', 'RIB04_RIO', 'RIB05_POZ', 'RIB06_OTR'];\n    const tipoFuenteHidrica = ['RIB08_SUPF', 'RIB09_SUBT', 'RIB10_TEMP', 'RIB11_PERM', 'RIB12_ARTF', 'RIB13_NATU'];\n    const areasAltoValor = ['RIB32_AVC1', 'RIB33_AVC2', 'RIB34_AVC3', 'RIB35_AVC4', 'RIB36_AVC5', 'RIB37_AVC6'];\n    for (let index = 0; index < headers.length; index++) {\n      this.fillArray(headers[index], values[index], comoControlaMaleza,\n        formulario.secciones.controlMalezas.preguntas.controlaMalezas.preguntas.comoControlaMaleza.respuesta);\n      this.fillArray(headers[index], values[index], tipoControlMipe,\n        formulario.secciones.MIPE.preguntas.realizaPracticasMPE.preguntas.tipoControlMPE.respuesta);\n      this.fillArray(headers[index], values[index], comoRealizaSecado,\n        formulario.secciones.secado.preguntas.maneraRealzarSecado.respuesta);\n      this.fillArray(headers[index], values[index], criterioClasificaBasura,\n        formulario.secciones.secado.preguntas.maneraRealzarSecado.respuesta);\n      this.fillArray(headers[index], values[index], especiesArboles,\n        formulario.secciones.conservacionSuelosBiodiversidad.preguntas.especiesArbolesEnCultivo.respuesta);\n      this.fillArray(headers[index], values[index], fuentesHidricas,\n        formulario.secciones.proteccionAreasRiberenias.preguntas.poseeFuenteHidrica.preguntas.nombreFuenteHidrica.respuesta);\n      this.fillArray(headers[index], values[index], tipoFuenteHidrica,\n        formulario.secciones.proteccionAreasRiberenias.preguntas.poseeFuenteHidrica.preguntas.tipoFuenteHidrica.respuesta);\n      this.fillArray(headers[index], values[index], areasAltoValor,\n        formulario.secciones.proteccionAreasAltoValorConservacion.preguntas.fincaConsideradaAltoValor.preguntas.tipoAltoValor.respuesta);\n    }\n  }\n\n  private fillArray(header: string, value: string, codigos: string[], arreglo: string[]): boolean {\n    for (let codigo of codigos) {\n      if (codigo === header) {\n        arreglo.push(value);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private fillMatrixMonths(header: string, value: string, codigos: string[], arreglo: string[]): boolean {\n    const meses = [\"ENERO\", \"FEBRERO\", \"MARZO\", \"ABRIL\", \"MAYO\", \"JUNIO\", \"JULIO\", \"AGOSTO\", \"SEPTIEMBRE\", \"OCTUBRE\", \"NOVIEMBRE\", \"DICIEMBRE\"];\n    for (let index = 0; index < codigos.length; index++) {\n        const codigo = codigos[index];\n        if (codigo === header && value === 'AFIRMATIVO') {\n            arreglo.push(meses[index]);\n            return true;\n        }\n    }\n    return false;\n  }\n\n  private async initFormularioVerificacion(id: string, agricultorId: string, agricultorName: string, tecnicoId: string, tecnicoName: string, fechaVisita: string): Promise<FormularioVerificacion> {\n    if(agricultorId != \"\"){\n        const agricultor = await this.importacionAgricultor.initAgricultor(agricultorId);\n        const tecnico = await this.importacionAgricultor.initTecnico(tecnicoId, tecnicoName);\n        return {\n            id: id,\n            agricultor: agricultor,\n            tecnico: tecnico,\n            fechaVisita: fechaVisita,\n            secciones: {\n                datosFinca: {\n                    preguntas: {\n                        incrementoHectareajeFinca: {\n                            respuesta: \"\",\n                            preguntas: {\n                                cantidadAumento: {\n                                    respuesta: \"\"\n                                },\n                                mesIncrementoHectareaje: {\n                                    respuesta: \"\"\n                                },\n                                motivoAreaNueva: {\n                                    respuesta: \"\"\n                                },\n                                usoAreaNueva: {\n                                    respuesta: \"\"\n                                },\n                                incrementoFueraTamanioFinca: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                injertacion: {\n                    preguntas: {\n                        realizoInjertosUltimos12Meses: {\n                            respuesta: \"\",\n                            preguntas: {\n                                mesRealizoInjertos: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                manejoSuelo: {\n                    preguntas: {\n                        tipoSuelo: {\n                            respuesta: []\n                        },\n                        capacitacionTomaMuestrasSuelo: {\n                            respuesta: \"\"\n                        },\n                        analisisSuelo: {\n                            respuesta: \"\",\n                            preguntas: {\n                                sueloPH: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        suelosNivelesAltosAcidez: {\n                            respuesta: \"\",\n                            preguntas: {\n                                corregidoPHSueloFinca: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        maneraCorregidoPHSuelo: {\n                            respuesta: [],\n                            preguntas: {\n                                tipoProductoQuimico: {\n                                    respuesta: []\n                                },\n                                tipoProductoNatural: {\n                                    respuesta: []\n                                }\n                            }\n                        }\n                    }\n                },\n                fertilizacion: {\n                    preguntas: {\n                        fertilizaCacaotales: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoProductoUsado: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        usaFertilizanteEdafico: {\n                            respuesta: \"\",\n                            preguntas: {\n                                vecesUsadoAlAnioFertilizanteEdafico: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        usaFertilizanteFoliar: {\n                            respuesta: \"\",\n                            preguntas: {\n                                vecesUsadoAlAnioFertilizanteFoliar: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        recibidoFertilizanteKits: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoFertilizanteRecibido: {\n                                    respuesta: []\n                                }\n                            }\n                        },\n                        opinionEfectividadFertilizante: {\n                            respuesta: \"\"\n                        },\n                        repetirCompraConDescuento: {\n                            respuesta: \"\"\n                        },\n                        disminuidoProductosQuimicosPorOrganicos: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                bodega: {\n                    preguntas: {\n                        poseeBodega: {\n                            respuesta: \"\"\n                        },\n                        bodegaSegura: {\n                            respuesta: \"\"\n                        },\n                        bodegaOrdenada: {\n                            respuesta: \"\"\n                        },\n                        clasificadaXProducto: {\n                            respuesta: \"\"\n                        },\n                        tieneRegistroAlmacena: {\n                            respuesta: \"\"\n                        },\n                        cuentaDuchaEmergencia: {\n                            respuesta: \"\"\n                        },\n                        conocimientoProdcutosPermitidosLINDT: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                controlMalezas: {\n                    preguntas: {\n                        controlaMalezas: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tiposMalezaEncontrada: {\n                                    respuesta: \"\"\n                                },\n                                comoControlaMaleza: {\n                                    respuesta: [],\n                                    preguntas: {\n                                        productoQuimicoUsado: {\n                                            respuesta: \"\"\n                                        },\n                                        regularidadProductoQuimicoUsado: {\n                                            respuesta: \"\"\n                                        },\n                                        recomendacionSeguidaAplicandoProductoQuimico: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        conocimientoDisposicionMaquinariaAgricola: {\n                            respuesta: \"\",\n                            preguntas: {\n                                haceUsoMisma: {\n                                    respuesta: \"\"\n                                },\n                                tiempoPromedioUso: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                poda: {\n                    preguntas: {\n                        realizaPoda: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoPoda: {\n                                    respuesta: []\n                                },\n                                realizaPodaFormacion: {\n                                    respuesta: \"\",\n                                    preguntas: {\n                                        podaFormacionEsCorrecta: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                realizaPodaMantenimiento: {\n                                    respuesta: \"\",\n                                    preguntas: {\n                                        podaMantenimientoEsCorrecta: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                realizaPodaFitosanitaria: {\n                                    respuesta: \"\",\n                                    preguntas: {\n                                        podaFitosanitariaEsCorrecta: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                realizaPodaRehabilitacion: {\n                                    respuesta: \"\",\n                                    preguntas: {\n                                        podaRehabilitacionEsCorrecta: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        cortesLaceracionesPlantaMalaPoda: {\n                            respuesta: \"\"\n                        },\n                        mazorcasEstadoPudricion: {\n                            respuesta: \"\"\n                        },\n                        malaPodaAlbergaPlagasEnfermedades: {\n                            respuesta: \"\",\n                            preguntas: {\n                                plagasMalaPoda: {\n                                    respuesta: []\n                                },\n                                enfermedadesMalaPoda: {\n                                    respuesta: []\n                                }\n                            }\n                        }\n                    }\n                },\n                MIPE: {\n                    preguntas: {\n                        realizaPracticasMPE: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoControlMPE: {\n                                    respuesta: []\n                                }\n                            }\n                        },\n                        corrigioProblemasMPE: {\n                            respuesta: \"\"\n                        },\n                        fincaLibreAplicacionQuimica: {\n                            respuesta: \"\"\n                        },\n                        controlaEnfermedades: {\n                            respuesta: \"\"\n                        },\n                        reduccionIncidenciaPlagasEnfermedades: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                saludSeguridadOcupacional: {\n                    preguntas: {\n                        trabajadoresLlevadosCapacitacionesSSO: {\n                            respuesta: \"\"\n                        },\n                        usoPictograma: {\n                            respuesta: \"\"\n                        },\n                        buenasPracticasFincaTrabajadores: {\n                            respuesta: \"\"\n                        },\n                        botiquin: {\n                            respuesta: \"\"\n                        },\n                        eppAntesPlaguicida: {\n                            respuesta: \"\"\n                        },\n                        instruccionesPrimerosAuxilios: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                registrosProductor: {\n                    preguntas: {\n                        ventaAnualCacaoQuintales: {\n                            respuesta: \"\"\n                        },\n                        ventaAnualCacaoUSD: {\n                            respuesta: \"\"\n                        },\n                        egresoCompraMateriales: {\n                            respuesta: \"\"\n                        },\n                        egresoManoObra: {\n                            respuesta: \"\"\n                        },\n                        manejoCuadernilloRegistros: {\n                            respuesta: \"\"\n                        },\n                        manejoCostosPlanificacionFinanciera: {\n                            respuesta: \"\"\n                        },\n                        disponibilidadAhorrarEnCuenta: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoInstitucionAhorroCuenta: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                cosecha: {\n                    preguntas: {\n                        cosechaSeparadoCacaoNacionalCCN51: {\n                            respuesta: \"\"\n                        },\n                        plantasLaceracionesCicatricesMalaPractica: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                fermentacion: {\n                    preguntas: {\n                        fermentaCacao: {\n                            respuesta: \"\",\n                            preguntas: {\n                                razonNoFermenta: {\n                                    respuesta: \"\"\n                                },\n                                modoFermentacion: {\n                                    respuesta: \"\"\n                                },\n                                medidasHigieneFermentacion: {\n                                    respuesta: \"\"\n                                },\n                                aumentoIngresoPorFermentacion: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                secado: {\n                    preguntas: {\n                        nivelHumedadCacaoVendido: {\n                            respuesta: \"\"\n                        },\n                        maneraRealzarSecado: {\n                            respuesta: []\n                        },\n                        mejoraIngresoMejorTratamientoSecadoCacao: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                venta: {\n                    preguntas: {\n                        personaVenderCacao: {\n                            respuesta: \"\",\n                            preguntas: {\n                                razon1: {\n                                    respuesta: \"\"\n                                },\n                                razon2: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        recibeBonosEmpresaProgramaLINDT: {\n                            respuesta: \"\",\n                            preguntas: {\n                                frecuenciaRecibeBono: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                condicionesLaborales: {\n                    preguntas: {\n                        discriminacion: {\n                            respuesta: \"\"\n                        },\n                        explotacion: {\n                            respuesta: \"\"\n                        },\n                        trabajoInfantil: {\n                            respuesta: \"\"\n                        },\n                        documentosSoporte: {\n                            respuesta: \"\"\n                        },\n                        montoAcuerdoContratoAgricola: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                conservacionAguaManejoDesechos: {\n                    preguntas: {\n                        fincaConRiego: {\n                            respuesta: \"\"\n                        },\n                        disenioRiego: {\n                            respuesta: [],\n                        },\n                        tieneDisenoFijo: {\n                            respuesta: \"\",\n                            preguntas: {\n                                hectareasDisenioRiegoFijo: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        tieneDisenoMovible: {\n                            respuesta: \"\",\n                            preguntas: {\n                                hectareasDisenioRiegoMovible: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        permisoExtraerAguaRiego: {\n                            respuesta: \"\"\n                        },\n                        analisisAguaRiego: {\n                            respuesta: \"\"\n                        },\n                        presentaAnexos: {\n                            respuesta: \"\"\n                        },\n                        utilizaFiltroEcologico: {\n                            respuesta: \"\",\n                            preguntas: {\n                                razonUsoFiltroEcologico: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        areaDeschPlasticos: {\n                            respuesta: \"\"\n                        },\n                        fincaLibrePlasticos: {\n                            respuesta: \"\"\n                        },\n                        clasificaBasuraDomestica: {\n                            respuesta: \"\"\n                        },\n                        criterioClasificaBasuraDomestica: {\n                            respuesta: []\n                        },\n                        practicaReciclajeCompostaje: {\n                            respuesta: \"\"\n                        },\n                        tratamientoBasura: {\n                            respuesta: \"\"\n                        },\n                        conocimientoAreaRecepcioEnvasesProductosQuimicos: {\n                            respuesta: \"\",\n                            preguntas: {\n                                usoServicioAreaRecepcioEnvasesProductosQuimicos: {\n                                    respuesta: \"\"\n                                },\n                                frecuenciaUsoServicioAreaRecepcioEnvasesProductosQuimicos: {\n                                    respuesta: \"\"\n                                },\n                                almacenaSeguridadEnvasesPrevioTraslado: {\n                                    respuesta: \"\",\n                                    preguntas: {\n                                        lugarAlmacena: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        tratamientoAguasNegras: {\n                            respuesta: \"\"\n                        },\n                        tipoExtraccion: {\n                            respuesta: \"\"\n                        },\n                        infraestructuraRiego: {\n                            respuesta: \"\"\n                        },\n                        impactoRiego: {\n                            respuesta: \"\"\n                        }\n                    }\n                },\n                conservacionSuelosBiodiversidad: {\n                    preguntas: {\n                        practicasConservacionSuelos: {\n                            respuesta: \"\"\n                        },\n                        practicaDeforestacion: {\n                            respuesta: \"\"\n                        },\n                        plantadoArbolesSombrioRecient: {\n                            respuesta: \"\",\n                            preguntas: {\n                                cuantosArbolesSombrio: {\n                                    respuesta: \"\"\n                                },\n                                promedioArbolesXHectarea: {\n                                    respuesta: \"\"\n                                },\n                                reforestadoOrillas: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        promedioArbolXHectarea12MAltura: {\n                            respuesta: \"\"\n                        },\n                        especiesDiferentesArbolesXHectarea: {\n                            respuesta: \"\"\n                        },\n                        especiesArbolesEnCultivo: {\n                            respuesta: [],\n                            preguntas: {\n                                especifiqueOtrosEspeciesArboles: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                proteccionAreasRiberenias: {\n                    preguntas: {\n                        poseeFuenteHidrica: {\n                            respuesta: \"\",\n                            preguntas: {\n                                nombreFuenteHidrica: {\n                                    respuesta: [],\n                                    preguntas: {\n                                        especifiqueOtros: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                consideradaFuenteHidrica: {\n                                    respuesta: \"\"\n                                },\n                                tipoFuenteHidrica: {\n                                    respuesta: []\n                                },\n                                poseeNacientes: {\n                                    respuesta: \"\",\n                                    preguntas: {\n                                        cuantasNacientes: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                brindaProteccionFuenteHidrica: {\n                                    respuesta: \"\",\n                                    preguntas: {\n                                        comoBrindaProtFuentHidr: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                distanciaRequerida: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                    }\n                },\n                proteccionAreasAltoValorConservacion: {\n                    preguntas: {\n                        sueloPresentaProblemaErosion: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoProblemaErosion: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        necesitaImplementarPracticasMejoraSuelo: {\n                            respuesta: \"\",\n                            preguntas: {\n                                comoQuePracticas: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        gradoPresentanPendientes: {\n                            respuesta: \"\"\n                        },\n                        cuentaConAreaForestales: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoAreaForestal: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        realizaPlanesCorteExtraccionMadera: {\n                            respuesta: \"\"\n                        },\n                        presentaAnexosAreasAltoValor: {\n                            respuesta: \"\"\n                        },\n                        realizaPlanesReforestacion: {\n                            respuesta: \"\"\n                        },\n                        conoceEspeciePeligroExtincionEnFinca: {\n                            respuesta: \"\",\n                            preguntas: {\n                                cualesEspeciesPeligroExtincion: {\n                                    respuesta: \"\"\n                                },\n                                especifiqueCualesEspeciesPeligroExtincion: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        fincaConsideradaAltoValor: {\n                            respuesta: \"\",\n                            preguntas: {\n                                tipoAltoValor: {\n                                    respuesta: []\n                                }\n                            }\n                        }\n                    }\n                },\n                diversificacionIngresos: {\n                    preguntas: {\n                        usoCultivoDiferenteCacao: {\n                            respuesta: \"\"\n                        },\n                        otraActividadDentroFincaConIngreso: {\n                            respuesta: \"\",\n                            //   preguntas:{\n                            //     otrosActividadesDentroFincaConIngreso:{\n                            //       respuesta: \"\"\n                            //     }\n                            //   }\n                        },\n                        huertosOrganicosEnFinca: {\n                            respuesta: \"\"\n                        },\n                        otraActividadFueraFincaConIngreso: {\n                            respuesta: \"\",\n                            preguntas: {\n                                actividadFueraFincaConIngreso: {\n                                    respuesta: \"\"\n                                },\n                                realizaActividadFueraFincaConIngreso: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        }\n                        //   ganaVentaCultivo:{\n                        //     respuesta: \"\"\n                        //   },\n                        //   ganaActividadesDentroDeFinca:{\n                        //     respuesta: \"\"\n                        //   },\n                        //   ganaActividadesFueraDeFinca:{\n                        //     respuesta: \"\"\n                        //   }\n                    }\n                },\n                capacitacionesBeneficioPrograma: {\n                    secciones: {\n                        capacitacion: {\n                            preguntas: {\n                                utilidadCacaoFinoAromaSostenibilidadTrazabilidad: {\n                                    respuesta: \"\"\n                                },\n                                aplicaCacaoFinoAromaSostenibilidadTrazabilidad: {\n                                    respuesta: \"\"\n                                },\n                                utilidadBuenasPracticasAgricolas: {\n                                    respuesta: \"\"\n                                },\n                                aplicaBuenasPracticasAgricolas: {\n                                    respuesta: \"\"\n                                },\n                                utilidadParametrosCalidad: {\n                                    respuesta: \"\"\n                                },\n                                aplicaParametrosCalidad: {\n                                    respuesta: \"\"\n                                },\n                                utilidadBuenasPracticasSociales: {\n                                    respuesta: \"\"\n                                },\n                                aplicaBuenasPracticasSociales: {\n                                    respuesta: \"\"\n                                },\n                                utilidadBuenasPracticasAmbientales: {\n                                    respuesta: \"\"\n                                },\n                                aplicaBuenasPracticasAmbientales: {\n                                    respuesta: \"\"\n                                },\n                                utilidadElaboracionProductosOrganicos: {\n                                    respuesta: \"\"\n                                },\n                                aplicaElaboracionProductosOrganicos: {\n                                    respuesta: \"\"\n                                },\n                                utilidadReproduccionVegetativa: {\n                                    respuesta: \"\"\n                                },\n                                aplicaReproduccionVegetativa: {\n                                    respuesta: \"\"\n                                },\n                                utilidadPoda: {\n                                    respuesta: \"\"\n                                },\n                                aplicaPoda: {\n                                    respuesta: \"\"\n                                },\n                                utilidadApicultura: {\n                                    respuesta: \"\"\n                                },\n                                aplicaApicultura: {\n                                    respuesta: \"\"\n                                },\n                                utilidadPorcicultura: {\n                                    respuesta: \"\"\n                                },\n                                aplicaPorcicultura: {\n                                    respuesta: \"\"\n                                },\n                                utilidadPiscicultura: {\n                                    respuesta: \"\"\n                                },\n                                aplicaPiscicultura: {\n                                    respuesta: \"\"\n                                },\n                                utilidadRiego: {\n                                    respuesta: \"\"\n                                },\n                                aplicaRiego: {\n                                    respuesta: \"\"\n                                },\n                                utilidadAgroforesteriaDinamica: {\n                                    respuesta: \"\"\n                                },\n                                aplicaAgroforesteriaDinamica: {\n                                    respuesta: \"\"\n                                },\n                                temasAdicionalesGustariaAprender: {\n                                    respuesta: \"\"\n                                }\n                            }\n                        },\n                        incentivos: {\n                            preguntas: {\n                                necesidadesDetectadasFinca: {\n                                    respuesta: \"\"\n                                }\n                            },\n                            secciones: {\n                                ambiental: {\n                                    preguntas: {\n                                        estadoPlantasFrutales: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoPlantasForestales: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoOtrosAmbiental: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaPlantasFrutales: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaPlantasForestales: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaOtrosAmbiental: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                insumos: {\n                                    preguntas: {\n                                        estadoFertilizanteEdafico: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoFertilizanteFoliar: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaFertilizanteEdafico: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaFertilizanteFoliar: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                maquinariaAgricola: {\n                                    preguntas: {\n                                        estadoMotoguadania: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoMotosierra: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoPodadoraDeAltura: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoBombaRiego: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoBombaAMotor: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoOtrosMaquinariaAgricola: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaMotoguadania: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaMotosierra: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaPodadoraDeAltura: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaBombaRiego: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaBombaAMotor: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaOtrosMaquinariaAgricola: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                herramientas: {\n                                    preguntas: {\n                                        estadoTijeras: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoSerruchos: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoMachetes: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoBaldes: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoTanques: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoPalas: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoEPP: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoKitPoda: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoKitVivero: {\n                                            respuesta: \"\"\n                                        },\n                                        estadoOtrosHerramientas: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaTijeras: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaSerruchos: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaMachetes: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaBaldes: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaTanques: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaPalas: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaEPP: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaKitPoda: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaKitVivero: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaOtrosHerramientas: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                proyectosInversion: {\n                                    preguntas: {\n                                        necesitaPlantasCacao800801: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaComboApicola: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaPiesCriasInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaPecesInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaRiego: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaOtrosProyectosInversion: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirPlantasCacao800801: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirComboApicola: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirPiesCriasInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirPecesInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirRiego: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirOtros: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasPlantasCacao800801: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasComboApicola: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasPiesCriasInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasPecesInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasRiego: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasOtros: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasPlantasCacao800801: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasComboApicola: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasPiesCriasInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasPecesInsumos: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasRiego: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasOtros: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                },\n                                calidadPostCosecha: {\n                                    preguntas: {\n                                        necesitaCajonFermentacion: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaMarquesinas: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaTendales: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaSecadoras: {\n                                            respuesta: \"\"\n                                        },\n                                        necesitaOtrosCalidadPostCosecha: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirCajonFermentacion: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirMarquesinas: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirTendales: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirSecadoras: {\n                                            respuesta: \"\"\n                                        },\n                                        disponibilidadInvertirOtrosCalidadPostCosecha: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasFermentacion: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasMarquesinas: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasTendales: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasSecadoras: {\n                                            respuesta: \"\"\n                                        },\n                                        condAdecuadasOtrosCalidadPostCosecha: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasFermentacion: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasMarquesinas: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasTendales: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasSecadoras: {\n                                            respuesta: \"\"\n                                        },\n                                        condEconomicasOtrosCalidadPostCosecha: {\n                                            respuesta: \"\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                    // recetario: {\n                    //     preguntas:{\n                    //         tipoSuelo:{\n                    //             respuesta: \"\",\n                    //             // preguntas:{\n                    //             //     tipoSueloRecomendacion:{\n                    //             //         respuesta: \"\"\n                    //             //     },\n                    //             //     tipoSueloPlazo:{\n                    //             //         respuesta: \"\"\n                    //             //     },\n                    //             //     tipoSueloCumplimiento:{\n                    //             //         respuesta: \"\"\n                    //             //     }\n                    //             // }\n                    //         },\n                    //         // topografia:{\n                    //         //     respuesta: \"\",\n                    //         //     preguntas:{\n                    //         //     topografiaRecomendacion:{\n                    //         //         respuesta: \"\"\n                    //         //     },\n                    //         //     topografiaPlazo:{\n                    //         //         respuesta: \"\"\n                    //         //     },\n                    //         //     topografiaCumplimiento:{\n                    //         //         respuesta: \"\"\n                    //         //     }\n                    //         //     }\n                    //         // },\n                    //         analisisSuelo:{\n                    //             respuesta: \"\",\n                    //             // preguntas:{\n                    //             // analisisSueloRecomendacion:{\n                    //             //     respuesta: \"\"\n                    //             // },\n                    //             // analisisSueloPlazo:{\n                    //             //     respuesta: \"\"\n                    //             // },\n                    //             // analisisSueloCumplimiento:{\n                    //             //     respuesta: \"\"\n                    //             // }\n                    //             // }\n                    //         }\n                    //     }\n                        \n                    // },\n                    // revisionPlantas:{\n                    //     preguntas:{\n                    //         beneficiarioPlantasCacao:{\n                    //             respuesta: \"\",\n                    //         },\n                    //         fichaMonitoreoPlantas:{\n                    //             respuesta: \"\",\n                    //         },\n                    //         porcentajeExitoPlantas:{\n                    //             respuesta: \"\",\n                    //         },\n                    //         causasPrincipalesMortalidad:{\n                    //             respuesta: \"\",\n                    //             preguntas:{\n                    //             otrasCausasPrincipalesMortalidad:{\n                    //                 respuesta: \"\"\n                    //             }\n                    //             }\n                    //         },\n                    //         reportePlagas:{\n                    //             respuesta: \"\",\n                    //         },\n                    //         reporteEnfermedades:{\n                    //             respuesta: \"\",\n                    //         },\n                    //         presentaAnexos:{\n                    //             respuesta: \"\",\n                    //         },\n                    //         implementaHuertosOrganicos:{\n                    //             respuesta: \"\",\n                    //         }\n                    //         }\n                    // }\n            }\n        }\n    }\n    \n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormularioType } from 'src/app/interfaces/formulario';\nimport { ImportacionAgricultorService } from './importacion-agricultor.service';\nimport { ImportacionLineaBaseService } from './importacion-linea-base.service';\nimport { ImportacionVerificacionService } from './importacion-verificacion.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImportacionesService {\n\n  constructor(\n    private importacionLineaBaseService: ImportacionLineaBaseService,\n    private importacionVerificacionService: ImportacionVerificacionService,\n    private importacionAgricultorService: ImportacionAgricultorService\n  ) { }\n\n  async importFormulario(file: any, header: boolean, delimeter: string, formularioType: FormularioType): Promise<void> {\n    switch (formularioType) {\n      case FormularioType.formularioLineaBase:\n        await this.importacionLineaBaseService.importAllFormularios(file, header, delimeter);\n        break;\n      case FormularioType.formularioVerificacion:\n        await this.importacionVerificacionService.importAllFormularios(file, header, delimeter);\n        break;\n      default:\n        console.log(\"NO EXISTE TIPO\");\n        break;\n    }\n  }\n\n  async importAgricultores(file: any, header: boolean, delimeter: string): Promise<void> {\n    try {\n      await this.importacionAgricultorService.importAllFormularios(file, header, delimeter);\n    } catch(error) {\n      console.log(error);\n      throw(error);\n    }\n  }\n  \n}\n"],"sourceRoot":"webpack:///"}